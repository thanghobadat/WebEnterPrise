// <auto-generated />
using System;
using Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(WebEnterpriseDbcontext))]
    [Migration("20220221100233_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5a907e7-bbee-40a5-9d35-8ee97fd67843"),
                            ConcurrencyStamp = "9a111c00-c547-4876-8bd8-a39170f5c3f0",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("f1edecfd-58b9-4a2b-b52c-d4b138741dce"),
                            ConcurrencyStamp = "46abd5b0-5938-4da1-b9b0-a51ed9da6bed",
                            Description = "QA Manager role",
                            Name = "QAManager",
                            NormalizedName = "QAManager"
                        },
                        new
                        {
                            Id = new Guid("3146da19-a31b-4026-86fb-ea519d9d108b"),
                            ConcurrencyStamp = "01877eb9-ed4c-4c98-8997-e7481f89f6ca",
                            Description = "QA Coordinator role",
                            Name = "QACoordinator",
                            NormalizedName = "QACoordinator"
                        },
                        new
                        {
                            Id = new Guid("28f8ceb5-928d-4c55-845b-3a15d89d9311"),
                            ConcurrencyStamp = "f6120c0f-aceb-4050-8ef7-7e7c96aaf0bd",
                            Description = "Staff role",
                            Name = "staff",
                            NormalizedName = "staff"
                        });
                });

            modelBuilder.Entity("Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56030beb-f704-4dd6-b237-7c9178273a22"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba4c6034-ecae-4b2b-918a-2a457764e84c",
                            CreatedAt = new DateTime(2022, 2, 21, 17, 2, 32, 519, DateTimeKind.Local).AddTicks(2016),
                            Email = "hoangthanh01022000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hoangthanh01022000@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEFtMIuy/AkkYidDZ57DCrQVTrSwZSi8dCTVQNpo+XvvjLpuJGGVHzx5K4vB4OT9dsA==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("2307dac6-95ba-4840-b22a-10ce96275c2d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "afe81ee4-fdc0-4f39-a77d-9a2de32b7589",
                            CreatedAt = new DateTime(2022, 2, 21, 17, 2, 32, 526, DateTimeKind.Local).AddTicks(4437),
                            Email = "hoangthanh01022000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hoangthanh01022000@gmail.com",
                            NormalizedUserName = "manager",
                            PasswordHash = "AQAAAAEAACcQAAAAENYHVVHPuCa6x7U322TUyM9vI9poeV59NAWXhA0NmRCEveY8ND4nM8WttxsOtnviGQ==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "manager"
                        },
                        new
                        {
                            Id = new Guid("b5a5d948-391f-42e3-8db9-6f07c570a8e2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d72cbe06-5cd3-41a8-a489-279da7dcf078",
                            CreatedAt = new DateTime(2022, 2, 21, 17, 2, 32, 533, DateTimeKind.Local).AddTicks(2838),
                            DepartmentId = 1,
                            Email = "nguyenthtran.dev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "nguyenthtran.dev@gmail.com",
                            NormalizedUserName = "QACoordinatorAcademic",
                            PasswordHash = "AQAAAAEAACcQAAAAEDDp2eWbFjcZ1VeBDhr468fQg85oP+KHA5yRaNtBO0C4okGHg/inQ7BY6WKXscmxNA==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "QACoordinatorAcademic"
                        },
                        new
                        {
                            Id = new Guid("dc42a35f-bf6b-4aee-b0a7-c95b64159f81"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22f0868d-e30a-40f6-bd67-efdf48588a7e",
                            CreatedAt = new DateTime(2022, 2, 21, 17, 2, 32, 540, DateTimeKind.Local).AddTicks(2130),
                            DepartmentId = 2,
                            Email = "hungnd342000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hungnd342000@gmail.com",
                            NormalizedUserName = "QACoordinatorSupport",
                            PasswordHash = "AQAAAAEAACcQAAAAEF5NMJUrrKxKtjFUnhe5bVqGo3UFytX5696dDbXwVs7yr6zak21Tw2LNKNTfInR6Qg==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "QACoordinatorSupport"
                        },
                        new
                        {
                            Id = new Guid("d3bba69e-3468-40a2-9eea-fa596e3fee15"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "069c147f-d412-4f23-a705-8e9fa7823a86",
                            CreatedAt = new DateTime(2022, 2, 21, 17, 2, 32, 547, DateTimeKind.Local).AddTicks(1887),
                            DepartmentId = 1,
                            Email = "hoangthanh01022000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hoangthanh01022000@gmail.com",
                            NormalizedUserName = "StaffAcademic",
                            PasswordHash = "AQAAAAEAACcQAAAAEIgaz3hVLJixuu3yJxRcwWogsyGnYgHKNxvIugo9cJwtRbUJNYgmYdiaPhqMIlDprw==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "StaffAcademic"
                        },
                        new
                        {
                            Id = new Guid("7ebb5441-a0f3-423c-8fe1-4666aaf569b7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e504b08-847e-419e-a579-36c6a51ca883",
                            CreatedAt = new DateTime(2022, 2, 21, 17, 2, 32, 554, DateTimeKind.Local).AddTicks(190),
                            DepartmentId = 2,
                            Email = "nguyenthtran.dev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "nguyenthtran.dev@gmail.com",
                            NormalizedUserName = "StaffSupport",
                            PasswordHash = "AQAAAAEAACcQAAAAENyhQkOyVY+XRFfkjMEikGx2PjrCIhUHE8cccugQKBeakBMkM7E4d6hgM3NsWANHDw==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "StaffSupport"
                        });
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdeaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymously")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Academic Department",
                            Name = "Academic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "This is Support Department",
                            Name = "Support"
                        });
                });

            modelBuilder.Entity("Data.Entities.Idea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 2, 21, 17, 2, 32, 491, DateTimeKind.Local).AddTicks(9345));

                    b.Property<int>("Dislike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 2, 28, 17, 2, 32, 492, DateTimeKind.Local).AddTicks(8132));

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinalDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 3, 4, 17, 2, 32, 492, DateTimeKind.Local).AddTicks(8573));

                    b.Property<bool>("IsAnonymously")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Like")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("View")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("Data.Entities.IdeaCategory", b =>
                {
                    b.Property<int>("IdeaId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("IdeaId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("IdeaCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("56030beb-f704-4dd6-b237-7c9178273a22"),
                            RoleId = new Guid("f5a907e7-bbee-40a5-9d35-8ee97fd67843")
                        },
                        new
                        {
                            UserId = new Guid("2307dac6-95ba-4840-b22a-10ce96275c2d"),
                            RoleId = new Guid("f1edecfd-58b9-4a2b-b52c-d4b138741dce")
                        },
                        new
                        {
                            UserId = new Guid("b5a5d948-391f-42e3-8db9-6f07c570a8e2"),
                            RoleId = new Guid("3146da19-a31b-4026-86fb-ea519d9d108b")
                        },
                        new
                        {
                            UserId = new Guid("dc42a35f-bf6b-4aee-b0a7-c95b64159f81"),
                            RoleId = new Guid("3146da19-a31b-4026-86fb-ea519d9d108b")
                        },
                        new
                        {
                            UserId = new Guid("d3bba69e-3468-40a2-9eea-fa596e3fee15"),
                            RoleId = new Guid("28f8ceb5-928d-4c55-845b-3a15d89d9311")
                        },
                        new
                        {
                            UserId = new Guid("7ebb5441-a0f3-423c-8fe1-4666aaf569b7"),
                            RoleId = new Guid("28f8ceb5-928d-4c55-845b-3a15d89d9311")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Data.Entities.AppUser", b =>
                {
                    b.HasOne("Data.Entities.Department", "Department")
                        .WithMany("AppUser")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Data.Entities.Comment", b =>
                {
                    b.HasOne("Data.Entities.Idea", "Idea")
                        .WithMany()
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.IdeaCategory", b =>
                {
                    b.HasOne("Data.Entities.Category", "Category")
                        .WithMany("IdeaCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Idea", "Idea")
                        .WithMany("IdeaCategories")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("Data.Entities.AppUser", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Navigation("IdeaCategories");
                });

            modelBuilder.Entity("Data.Entities.Department", b =>
                {
                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Data.Entities.Idea", b =>
                {
                    b.Navigation("IdeaCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
