// <auto-generated />
using System;
using Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(WebEnterpriseDbcontext))]
    [Migration("20220306030249_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f7f2580-651e-47e5-a9d8-6e8a90f4e64f"),
                            ConcurrencyStamp = "621e1073-d909-4343-9932-b56d9e0ec7b5",
                            Description = "Administrator role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("923cbd1d-3d58-44f5-9f8f-707a8edd6249"),
                            ConcurrencyStamp = "0a752d20-bba4-4ddf-a274-4f416ad6d0f3",
                            Description = "QA Manager role",
                            Name = "QAManager",
                            NormalizedName = "QAManager"
                        },
                        new
                        {
                            Id = new Guid("83a226a5-f7c7-4fc5-83ff-bdd88019f98d"),
                            ConcurrencyStamp = "69ce8cba-bd70-40ac-9421-3a92e5e0830a",
                            Description = "QA Coordinator role",
                            Name = "QACoordinator",
                            NormalizedName = "QACoordinator"
                        },
                        new
                        {
                            Id = new Guid("1e84833f-96af-4611-9684-49de78cfc897"),
                            ConcurrencyStamp = "31c20564-1e83-4f12-b66a-88fb4c4bc878",
                            Description = "Staff role",
                            Name = "staff",
                            NormalizedName = "staff"
                        });
                });

            modelBuilder.Entity("Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73e15ce4-064b-446a-9005-1c3687b55db3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa88e41d-5ffa-4ff1-936c-ef0608566aef",
                            CreatedAt = new DateTime(2022, 3, 6, 10, 2, 48, 503, DateTimeKind.Local).AddTicks(3529),
                            Email = "hoangthanh01022000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hoangthanh01022000@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEI8pdBm1uoXjJeThv49Cu9lEr336UP9Dbr/Rq+ggi1iUxysypXsdekbModISvbW64Q==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("20f0e1c0-9e73-48cd-b863-9d4d2aa3d6e8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9295411-02bd-444c-aed0-f45b9ce78300",
                            CreatedAt = new DateTime(2022, 3, 6, 10, 2, 48, 510, DateTimeKind.Local).AddTicks(4630),
                            Email = "hoangthanh01022000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hoangthanh01022000@gmail.com",
                            NormalizedUserName = "manager",
                            PasswordHash = "AQAAAAEAACcQAAAAELVymqeEKFo/S6TLFOHKAwroGzoaIi/dl7XUNWYevl2M5M1GOKMb0vJHJC9SnPLv2A==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "manager"
                        },
                        new
                        {
                            Id = new Guid("f05890a2-fe56-4f77-9470-b893c36db0ff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f725e1d-cbcf-4d4c-957a-6e7d2068a8e7",
                            CreatedAt = new DateTime(2022, 3, 6, 10, 2, 48, 517, DateTimeKind.Local).AddTicks(2550),
                            DepartmentId = 1,
                            Email = "nguyenthtran.dev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "nguyenthtran.dev@gmail.com",
                            NormalizedUserName = "QACoordinatorAcademic",
                            PasswordHash = "AQAAAAEAACcQAAAAEFnwkUM6YTczF89EikbuuTN9HYDdjnWVbyHc37aN46eFQRd/6WnhxA/EYYWdEQLdZw==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "QACoordinatorAcademic"
                        },
                        new
                        {
                            Id = new Guid("ede32135-4ebf-4455-93fa-fcaaf8e55dfc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e3a00c1-71bc-402d-bbd5-cb43dddfb07f",
                            CreatedAt = new DateTime(2022, 3, 6, 10, 2, 48, 524, DateTimeKind.Local).AddTicks(1208),
                            DepartmentId = 2,
                            Email = "hungnd342000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hungnd342000@gmail.com",
                            NormalizedUserName = "QACoordinatorSupport",
                            PasswordHash = "AQAAAAEAACcQAAAAEKN33kxPdxfsDitowktA9+PG+rONImLvb2J1wOWJ6G4JzUQJWfapPF08k/gQbpUaTA==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "QACoordinatorSupport"
                        },
                        new
                        {
                            Id = new Guid("a6a5acd3-f702-4c5e-a2b8-332c05ec1e26"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a5dfc807-ef69-418f-849f-c13cf03436eb",
                            CreatedAt = new DateTime(2022, 3, 6, 10, 2, 48, 530, DateTimeKind.Local).AddTicks(8965),
                            DepartmentId = 1,
                            Email = "hoangthanh01022000@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "hoangthanh01022000@gmail.com",
                            NormalizedUserName = "StaffAcademic",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4gU1d1pCgMbdipgzo+1r7Jt4NCpxHhB1IbCt5R6gfCUdUzkKHlJi6kMO+GkuDdGA==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "StaffAcademic"
                        },
                        new
                        {
                            Id = new Guid("fd4d8a74-d342-43a6-9729-7a8e3332a5ce"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97ff8f3d-6e42-49bc-98a3-54c9bff2ce20",
                            CreatedAt = new DateTime(2022, 3, 6, 10, 2, 48, 537, DateTimeKind.Local).AddTicks(6679),
                            DepartmentId = 2,
                            Email = "nguyenthtran.dev@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "nguyenthtran.dev@gmail.com",
                            NormalizedUserName = "StaffSupport",
                            PasswordHash = "AQAAAAEAACcQAAAAECUui9R+8NJQp8wZHBXZUcZbsfNyjb9TI8jieBGvlkBwCnv+1CP9P8a6aA7qp5Y1rw==",
                            PhoneNumber = "0123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "StaffSupport"
                        });
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdeaId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymously")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdeaId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Academic Department",
                            Name = "Academic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "This is Support Department",
                            Name = "Support"
                        });
                });

            modelBuilder.Entity("Data.Entities.Idea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 3, 6, 10, 2, 48, 482, DateTimeKind.Local).AddTicks(164));

                    b.Property<int>("Dislike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 3, 13, 10, 2, 48, 482, DateTimeKind.Local).AddTicks(8667));

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinalDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 3, 17, 10, 2, 48, 482, DateTimeKind.Local).AddTicks(9077));

                    b.Property<bool>("IsAnonymously")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Like")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("View")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("Data.Entities.IdeaCategory", b =>
                {
                    b.Property<int>("IdeaId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("IdeaId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("IdeaCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("73e15ce4-064b-446a-9005-1c3687b55db3"),
                            RoleId = new Guid("7f7f2580-651e-47e5-a9d8-6e8a90f4e64f")
                        },
                        new
                        {
                            UserId = new Guid("20f0e1c0-9e73-48cd-b863-9d4d2aa3d6e8"),
                            RoleId = new Guid("923cbd1d-3d58-44f5-9f8f-707a8edd6249")
                        },
                        new
                        {
                            UserId = new Guid("f05890a2-fe56-4f77-9470-b893c36db0ff"),
                            RoleId = new Guid("83a226a5-f7c7-4fc5-83ff-bdd88019f98d")
                        },
                        new
                        {
                            UserId = new Guid("ede32135-4ebf-4455-93fa-fcaaf8e55dfc"),
                            RoleId = new Guid("83a226a5-f7c7-4fc5-83ff-bdd88019f98d")
                        },
                        new
                        {
                            UserId = new Guid("a6a5acd3-f702-4c5e-a2b8-332c05ec1e26"),
                            RoleId = new Guid("1e84833f-96af-4611-9684-49de78cfc897")
                        },
                        new
                        {
                            UserId = new Guid("fd4d8a74-d342-43a6-9729-7a8e3332a5ce"),
                            RoleId = new Guid("1e84833f-96af-4611-9684-49de78cfc897")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Data.Entities.AppUser", b =>
                {
                    b.HasOne("Data.Entities.Department", "Department")
                        .WithMany("AppUser")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Data.Entities.Comment", b =>
                {
                    b.HasOne("Data.Entities.Idea", "Idea")
                        .WithMany("Comments")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Idea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Idea", b =>
                {
                    b.HasOne("Data.Entities.AppUser", "User")
                        .WithMany("Ideas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.IdeaCategory", b =>
                {
                    b.HasOne("Data.Entities.Category", "Category")
                        .WithMany("IdeaCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Idea", "Idea")
                        .WithMany("IdeaCategories")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Idea");
                });

            modelBuilder.Entity("Data.Entities.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ideas");
                });

            modelBuilder.Entity("Data.Entities.Category", b =>
                {
                    b.Navigation("IdeaCategories");
                });

            modelBuilder.Entity("Data.Entities.Department", b =>
                {
                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Data.Entities.Idea", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("IdeaCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
